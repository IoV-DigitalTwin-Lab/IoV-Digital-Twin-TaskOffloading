//
// Generated file, do not edit! Created by opp_msgtool 6.0 from src/msgs/Offload.msg.
//

#ifndef __IOVMINI_OFFLOAD_M_H
#define __IOVMINI_OFFLOAD_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace iovmini {

class OffloadRequest;
class OffloadResult;

}  // namespace iovmini


namespace iovmini {

/**
 * Class generated from <tt>src/msgs/Offload.msg:3</tt> by opp_msgtool.
 * <pre>
 * message OffloadRequest extends cPacket
 * {
 *     int srcModuleId;
 *     double cycles;
 *     int bytes;
 *     int rsuIndex;
 *     simtime_t created;
 * }
 * </pre>
 */
class OffloadRequest : public ::omnetpp::cPacket
{
  protected:
    int srcModuleId = 0;
    double cycles = 0;
    int bytes = 0;
    int rsuIndex = 0;
    ::omnetpp::simtime_t created = SIMTIME_ZERO;

  private:
    void copy(const OffloadRequest& other);

  protected:
    bool operator==(const OffloadRequest&) = delete;

  public:
    OffloadRequest(const char *name=nullptr, short kind=0);
    OffloadRequest(const OffloadRequest& other);
    virtual ~OffloadRequest();
    OffloadRequest& operator=(const OffloadRequest& other);
    virtual OffloadRequest *dup() const override {return new OffloadRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSrcModuleId() const;
    virtual void setSrcModuleId(int srcModuleId);

    virtual double getCycles() const;
    virtual void setCycles(double cycles);

    virtual int getBytes() const;
    virtual void setBytes(int bytes);

    virtual int getRsuIndex() const;
    virtual void setRsuIndex(int rsuIndex);

    virtual ::omnetpp::simtime_t getCreated() const;
    virtual void setCreated(::omnetpp::simtime_t created);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const OffloadRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, OffloadRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/msgs/Offload.msg:11</tt> by opp_msgtool.
 * <pre>
 * message OffloadResult extends cPacket
 * {
 *     int srcModuleId;
 *     int rsuIndex;
 *     simtime_t created;
 *     simtime_t finishedAt;
 * }
 * </pre>
 */
class OffloadResult : public ::omnetpp::cPacket
{
  protected:
    int srcModuleId = 0;
    int rsuIndex = 0;
    ::omnetpp::simtime_t created = SIMTIME_ZERO;
    ::omnetpp::simtime_t finishedAt = SIMTIME_ZERO;

  private:
    void copy(const OffloadResult& other);

  protected:
    bool operator==(const OffloadResult&) = delete;

  public:
    OffloadResult(const char *name=nullptr, short kind=0);
    OffloadResult(const OffloadResult& other);
    virtual ~OffloadResult();
    OffloadResult& operator=(const OffloadResult& other);
    virtual OffloadResult *dup() const override {return new OffloadResult(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSrcModuleId() const;
    virtual void setSrcModuleId(int srcModuleId);

    virtual int getRsuIndex() const;
    virtual void setRsuIndex(int rsuIndex);

    virtual ::omnetpp::simtime_t getCreated() const;
    virtual void setCreated(::omnetpp::simtime_t created);

    virtual ::omnetpp::simtime_t getFinishedAt() const;
    virtual void setFinishedAt(::omnetpp::simtime_t finishedAt);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const OffloadResult& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, OffloadResult& obj) {obj.parsimUnpack(b);}


}  // namespace iovmini


namespace omnetpp {

template<> inline iovmini::OffloadRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<iovmini::OffloadRequest*>(ptr.get<cObject>()); }
template<> inline iovmini::OffloadResult *fromAnyPtr(any_ptr ptr) { return check_and_cast<iovmini::OffloadResult*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __IOVMINI_OFFLOAD_M_H

